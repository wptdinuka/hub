import Head from 'next/head'
import { useEffect, useState } from 'react'
import styles from '../styles/Layout.module.scss'
import Currencyrow from '../components/Currencyrow'



function Currency() {


    const [currencyOptions, setCurrencyOptions] = useState([])
    const [fromCurrency, setFromCurrency] = useState()
    const [toCurrency, setToCurrency] = useState()
    const [exchangeRate, setExchangeRate] = useState()
    const [amount, setAmount] = useState(1)
    const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)
   

    let toAmount, fromAmount
    if (amountInFromCurrency) {
        fromAmount = amount
        toAmount = amount * exchangeRate
    } else {
        toAmount = amount
        fromAmount = amount / exchangeRate
    }
    



    useEffect(() => {
        fetch("https://fixer-fixer-currency-v1.p.rapidapi.com/latest?base=EUR&symbols=LKR%2CGBP%2CUSD", {
            "method": "GET",
            "headers": {
                "x-rapidapi-host": "fixer-fixer-currency-v1.p.rapidapi.com",
                "x-rapidapi-key": "2ddc4c8cb4msh0c9e366b10869f2p1df196jsn9f56ebef905e"
            }
        })
        .then(res => res.json())
        .then(data => {
            const firstCurrency = Object.keys(data.rates) [0]
            setCurrencyOptions([data.base, ...Object.keys(data.rates)])
            setFromCurrency(data.base)
            setToCurrency(firstCurrency)
            setExchangeRate(data.rates[firstCurrency])
        })

        
    }, [])



    useEffect( () => {
        if (fromCurrency != null && toCurrency != null) {
            fetch(`https://fixer-fixer-currency-v1.p.rapidapi.com/latest?base=${fromCurrency}&symbols=${toCurrency}`, {
                "method": "GET",
                "headers": {
                    "x-rapidapi-host": "fixer-fixer-currency-v1.p.rapidapi.com",
                    "x-rapidapi-key": "2ddc4c8cb4msh0c9e366b10869f2p1df196jsn9f56ebef905e"
                }
            })

            .then(res => res.json())
            .then(data => setExchangeRate(data.rates[toCurrency]))
        }
    }, [fromCurrency, toCurrency])
    


    function handleFromAmountChange(e) {
     setAmount(e.target.value)
     setAmountInFromCurrency(true)
    }

    function handleToAmountChange(e) {
        setAmount(e.target.value)
        setAmountInFromCurrency(false)
       }

    return (
        <>
        <Head>
        <title>Currency Converter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    <main className={styles.currencymain}>
        <h1 className={styles.mainheader}> Currency Converter </h1>

      <div  className={styles.converter} >

      <Currencyrow
      currencyOptions={currencyOptions}
      selectedCurrency={fromCurrency}
      onChangeCurrency={e => setFromCurrency(e.target.value)}
      onChangeAmount={handleFromAmountChange}
      amount={fromAmount}
      />
      <div className={styles.equalmark} > = </div>
      <Currencyrow
      currencyOptions={currencyOptions}
      selectedCurrency={toCurrency}
      onChangeCurrency={e => setToCurrency(e.target.value)}
      onChangeAmount={handleToAmountChange}
      amount={toAmount}
      />

       </div>
        </main>
        </>
    )
}

export default Currency